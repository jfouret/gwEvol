#!/usr/bin/env python
import argparse
#add gitRepository
version='SEDMATCHGITVERSION'
install_lib='SEDMATCHINSTALLLIB'
year=2016
author='Julien Fouret'
contact='julien.fouret@fouret.me'
parser = argparse.ArgumentParser(description="""

#-----------------------|gwEvol-paml|-----------------------#
     Genome-wide screening of coding sequences with PAML
-------------------------------------------------------------
This software serializes genome-wide analyses of molecular ev-
olution on HPC infrastructure. All coding sequences are expec-
ted to be produced using gwAlign-Unify. 

The ete3 software is needed to drive PAML analysis. 

All models available in ete3 can be runned. However default
arguments will only run models necessary for Branch and 
Branch-site positive selection analyses.

""",epilog="Version : "+str(version)+"\n"+str(year)+"\nAuthor : "+author+" for more informations or enquiries please contact "+contact,formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('-aln_dir', metavar='/path', required=True, help="""
MSAs repository produced with gwAlign-Unify""")
parser.add_argument('-mark', metavar='ete3_mark', required=True, help="""
branch(es) to mark as target (through ete3) for positive selection analysis (using names in the tree)""")
parser.add_argument('-tree', metavar='tree.nh', required=True, help="""
Tree file with newick format""")
parser.add_argument('-filter', metavar='name', required=False,default='default_filter', help="""
Matching the -name argument provided to gwAlign-Unify -mode stat_filter
(default='default_filter')""")
parser.add_argument('-outDir', metavar='/path', required=True, help="""Output directory""")
parser.add_argument('-seed', metavar='N',default="123456", required=False, help="""random seed to reproduce pseudo-random part 
(default=123456')""")
parser.add_argument('-queue', metavar='name',default=None, required=False, help="""Queue/partition for HPC
(default=None)""")
parser.add_argument('-models', metavar='model1,model2,...', required=False,default='M0,b_free,M1,bsA1,bsA', help="""
List of model (ete3 names) to be computed
(default='M0,b_free,M1,bsA1,bsA')
""")
parser.add_argument('-batchLim', metavar='N',default='20', required=False, help="""
number of genes per jobs
(default='20')
""")
parser.add_argument('-v',action='store_true', help="verbose")
args=parser.parse_args()

import re
import os
import subprocess
import sys
from upype import *

rootedDir=RootDir(args.outDir,True,{'paml':str})

# Define variable and process arguments
Nlim=int(args.batchLim)
treeFile=os.path.abspath(args.tree)
alnRepo=os.path.abspath(args.aln_dir)
mark=args.mark
modelList=args.models.split(',')
prefix=args.filter

rootedDir.addCommand('ete3',"ete3","ete3 version | sed 's/ Tools.*$//g'")

def get_closest_leaf_name(tree,leaf_name):
	leafs=tree.get_terminals()
	leaf_target=tree.find_clades(name=leaf_name).next()
	for leaf in leafs:
		if len(tree.trace(leaf,leaf_target))==2:
			return(leaf.name)

def tree_reduce(oriTree,oriAln,oriMark):
	"""
	@summary: adjust the tree and the mark to be specified in ete3 if there is missing sequences in the alignment.
	"""
	import sys
	from Bio import Phylo
	from Bio import AlignIO
	tree = Phylo.read(oriTree, 'newick')
	leaf_names=[x.name for x in tree.get_terminals()]
	aligned_species=[x.name for x in AlignIO.read(oriAln, 'fasta')]
	import re 
	comma1=False
	m=re.match("(.*),,(.*)",oriMark)
	if m:
		sep=',,'
		markList=[m.group(1),m.group(2)]
	else:
		sep=',,,'
		m=re.match("(.*),,,(.*)",oriMark)
		if m:
			markList=[m.group(1),m.group(2)]
		else:
			sep=','
			comma1=True
			markList=oriMark.split(",")
	for i in range(0,len(leaf_names)):
		leaf_name=leaf_names[i]
		if (not leaf_name in aligned_species) :
			if leaf_name in markList:
				if comma1:
					del markList[markList.index(leaf_name)]
				else:
					if leaf_name in markList:
						markList[markList.index(leaf_name)]=get_closest_leaf_name(tree,leaf_name)
						if markList[0]==markList[1]:
							del markList[1]
			tree.prune(leaf_name)

	newMark=sep.join([x for x in markList if x is not None])
	return({"tree":tree,"mark":newMark})

filterPathDict=dict()

with open(alnRepo+'/reports/kgPathDictFile.tab','r') as kgPathDictFile:
	#Change for name in keys!
	for line in kgPathDictFile.readlines():
		key,value=line.rstrip().split("\t")
		filterPathDict[key]=value+'/'+prefix
rootedDir.addSerializer("gwEvol_paml",Nlim,queue=args.queue,ncpus='1',mem="2gb",workdir=rootedDir.paml)
cmdList=list()
for symbol in filterPathDict.keys():
	genePath=rootedDir.paml+'/'+symbol
	alnPath=filterPathDict[symbol]+"/tcs_filtered_aln.fa"
	### check min Size
	if not os.path.exists(alnPath):
		err_logger("::gwEvol::No alignment available for "+symbol+" at "+alnPath)
		continue
	mkdirp(genePath)
	from Bio import Phylo
	reduced=tree_reduce(treeFile,alnPath,mark)

	NewTree=genePath+'/tree_reduced.nh'
	NewAln=genePath+'/aln.fa'
	Phylo.write(reduced["tree"],NewTree,"newick")

	ambiguKill_file=search_lib("ambiguKill.py",install_lib+":")
	if ambiguKill_file==None:
		err_logger(" Warning The file ambiguKill.py in lib paths.")
		sys.exit(1)
	cmd.list.append("python "+ambiguKill_file+" -input "+alnPath+" -output "+NewAln+" -seed "+args.seed)

	opt={
		'--noimg':'',
		'-t':NewTree,
		'--alg':NewAln,
		'-o':prefix,
		'--mark':reduced["mark"],
		'--cpu':'1'
	}
	for model in modelList:
		opt['--models']=model
		pos=['1> '+prefix+"_"+model+'.out','2> '+prefix+"_"+model+'.err']
		cmdList.append(rootedDir.getCommand('ete3',genePath,opt,pos,subprogram='evol'))
	rootedDir.serialize("gwEvol_paml",cmdList)
	cmdList=list()
rootedDir.finishSerializer("gwEvol_paml")

# save rootedDir and save logs then exit
saveRoot(rootedDir)
sys.exit()
