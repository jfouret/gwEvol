#!/usr/bin/python
import argparse
#add gitRepository
gitRepository='SEDMATCHGITREPO'
version='SEDMATCHGITVERSION'
year=2016
author='Julien Fouret'
contact='julien.fouret12@uniagro.fr'
parser = argparse.ArgumentParser(description='perform positive selection analysis via qsub submitting',epilog="Version : "+str(version)+"\n"+str(year)+"\nAuthor : "+author+" for more informations or enquiries please contact "+contact,formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('-aln_dir', metavar='/path', required=True, help="alignement repositories (a folder with all alignments for each gene name named 'GeneName-ID.fa' or '.fna' or '.fasta')")
parser.add_argument('-mark', metavar='spec1,...,specN', required=True, help="branch(es) to mark as target for positive selection analysis (using names in the tree)")
parser.add_argument('-tree', metavar='tree.nh', required=True, help="Tree file with newick format")
parser.add_argument('-filter', metavar='name', required=True, help="name of the filter used by gwAlign suite")
parser.add_argument('-outDir', metavar='/path', required=True, help="Output directory")
parser.add_argument('-queue', metavar='name',default='SEDMATCHQUEUE', required=False, help="Queue for qsub")
parser.add_argument('-models', metavar='model1,model2,...', required=False,default='M0,b_free,M1,bsA1,bsA', help="list of model to be computed")
parser.add_argument('-batch', metavar='N',default='20', required=False, help="number of genes per batch")
parser.add_argument('-minSize', metavar='N',default='12', required=False, help="number of base minimun for using an alignment")
parser.add_argument('-ete3', metavar='/path',default='SEDMATCHETE3', required=False, help="Path of ete3 software")

args=parser.parse_args()

import re
import os
import subprocess
import sys
from jupype import *
#TODO ARGS.TARGET ==> ARGS.FILTER
# Define root directory and logs
rootedDir=RootDir(args.outDir,True,{'paml':str})
rootedDir.logs.writeArgs(args)

# Define variable and process arguments
batch=int(args.batch)
treeFile=os.path.abspath(args.tree)
alnRepo=os.path.abspath(args.aln_dir)
markList=args.mark.split(',')
mark=',,'.join(markList)
minSize=int(args.minSize)
modelList=args.models.split(',')
prefix=args.filter

ete3=Command('ete3',path=args.ete3)
ete3.log()

filterPathDict=dict()
with open(alnRepo+'/reports/kgPathDictFile.tab','r') as kgPathDictFile:
	#Change for name in keys!
	for line in kgPathDictFile.readlines():
		key,value=line.rstrip().split("\t")
		with open(value+'/annotation/consName.txt') as consNameFile:
			newKey=consNameFile.readline().rstrip()
		filterPathDict[newKey]=value+'/'+prefix

cmdList=list()
iterBatch=1
Nlim=int(args.batch)
N=0

for symbol in filterPathDict.keys():
	genePath=rootedDir.paml+'/'+symbol
	alnPath=filterPathDict[symbol]+'/codon_aln_blocks.fa'
	### check min Size
	if os.path.exists(alnPath):
		with open(alnPath,'r') as alnFile:
			line=alnFile.read()
			line=alnFile.read().rstrip()
			if len(line)<minSize:
				sys.stderr.write('Filtering codon_aln_blocks.fa too short '+symbol+' see path: '+filterPathDict[symbol])
				continue
	else:
		sys.stderr.write('Warning no codon_aln_blocks.fa for '+symbol+' see path: '+filterPathDict[symbol])
		continue
	mkdirp(genePath)
	opt={
		'--noimg':'',
		'-t':treeFile,
		'--alg':alnPath,
		'-o':prefix,
		'--mark':mark,
		'--cpu':'1'
	}
	pos=['1> '+prefix+'.out','2> '+prefix+'.err']
	for model in modelList:
		opt['--models']=model
		cmdList.append(ete3.create(genePath,opt,pos,subprogram='evol'))
	N+=1
	if N==Nlim:
		batchName='gwEvol_paml_'+str(iterBatch)
		submitQsubWithPBS(createPBS(cmdList,batchName,queue=args.queue,workdir=rootedDir.paml))
		N=0
		iterBatch+=1
		cmdList=list()
if N!=0:
	batchName='gwEvol_paml_'+str(iterBatch)
	submitQsubWithPBS(createPBS(cmdList,batchName,queue=args.queue,workdir=rootedDir.paml))

# save rootedDir and save logs then exit
saveRoot(rootedDir)
sys.exit()
