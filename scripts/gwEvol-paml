#!/bin/env python
import argparse
#add gitRepository
version='SEDMATCHGITVERSION'
year=2016
author='Julien Fouret'
contact='julien.fouret@fouret.me'
parser = argparse.ArgumentParser(description="""

#-----------------------|gwEvol-paml|-----------------------#
     Genome-wide screening of coding sequences with PAML
-------------------------------------------------------------
This software serializes genome-wide analyses of molecular ev-
olution on HPC infrastructure. All coding sequences are expec-
ted to be produced using gwAlign-Unify. 

The ete3 software is needed to drive PAML analysis. 

All models available in ete3 can be runned. However default
arguments will only run models necessary for Branch and 
Branch-site positive selection analyses.


""",epilog="Version : "+str(version)+"\n"+str(year)+"\nAuthor : "+author+" for more informations or enquiries please contact "+contact,formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('-aln_dir', metavar='/path', required=True, help="""
MSAs repository produced with gwAlign-Unify""")
parser.add_argument('-mark', metavar='ete3_mark', required=True, help="""
branch(es) to mark as target (through ete3) for positive selection analysis (using names in the tree)""")
parser.add_argument('-tree', metavar='tree.nh', required=True, help="""
Tree file with newick format""")
parser.add_argument('-filter', metavar='name', required=False,default='default_filter', help="""
Matching the -name argument provided to gwAlign-Unify -mode stat_filter
(default='default_filter')""")
parser.add_argument('-outDir', metavar='/path', required=True, help="""Output directory""")
parser.add_argument('-queue', metavar='name',default=None, required=False, help="""Queue/partition for HPC
(default=None)""")
parser.add_argument('-models', metavar='model1,model2,...', required=False,default='M0,b_free,M1,bsA1,bsA', help="""
List of model (ete3 names) to be computed
(default='M0,b_free,M1,bsA1,bsA')
""")
parser.add_argument('-batchLim', metavar='N',default='20', required=False, help="""
number of genes per jobs
(default='20')
""")
parser.add_argument('-minSize', metavar='N',default='12', required=False, help="""
number of base minimun for using an alignment""") # should be removed and handled directly by gwAlign
parser.add_argument('-v',action='store_true', help="verbose")
args=parser.parse_args()

import re
import os
import subprocess
import sys
from upype import *

rootedDir=RootDir(args.outDir,True,{'paml':str})

# Define variable and process arguments
batch=int(args.batchLim)
treeFile=os.path.abspath(args.tree)
alnRepo=os.path.abspath(args.aln_dir)
mark=args.mark
minSize=int(args.minSize)
modelList=args.models.split(',')
prefix=args.filter

ete3=rootedDir.addCommand('ete3','ete3 version | sed 's/ Tools.*$//g'')

filterPathDict=dict()
with open(alnRepo+'/reports/kgPathDictFile.tab','r') as kgPathDictFile:
	#Change for name in keys!
	for line in kgPathDictFile.readlines():
		key,value=line.rstrip().split("\t")
		filterPathDict[key]=value+'/'+prefix

rootedDir.addSerializer("gwAlign_blast_search",Nlim,queue=args.queue,ncpus='1',mem="2gb",workdir=rootedDir.results)

for symbol in filterPathDict.keys():
	genePath=rootedDir.paml+'/'+symbol
	alnPath_raw=filterPathDict[symbol]+'/codon_aln_blocks.fa'
	alnPath_paml=filterPathDict[symbol]+'/codon_aln_blocks_paml.fa'
	### check min Size
	if os.path.exists(alnPath_raw):
		with open(alnPath_raw,'r') as alnFile:
			line=alnFile.readline()
			line=alnFile.readline().rstrip()
			if len(line)<=minSize:
				error='Filtering codon_aln_blocks.fa too short '+symbol+' see path: '+filterPathDict[symbol]+"\n"
				writeErrOut('ERROR', 'error handling included in the script gwEvol-paml', filterPathDict[symbol]+'/codon_aln_blocks.fa screen', 'Gene: '+symbol, error)
				continue
	else:
		error='Warning no codon_aln_blocks.fa for '+symbol+' see path: '+filterPathDict[symbol]+"\n"
		writeErrOut('ERROR', 'error handling included in the script gwEvol-paml', filterPathDict[symbol]+'/codon_aln_blocks.fa screen', 'Gene: '+symbol, error)
		continue
	mkdirp(genePath)
	opt={
		'--noimg':'',
		'-t':treeFile,
		'--alg':alnPath_paml,
		'-o':prefix,
		'--mark':mark,
		'--cpu':'1'
	}
	pos=['1> '+prefix+'.out','2> '+prefix+'.err']
	cmdList.append('sed -e \'s/!/-/g\' '+alnPath_raw+' > '+alnPath_paml)
	for model in modelList:
		opt['--models']=model
		cmdList.append(ete3.create(genePath,opt,pos,subprogram='evol'))
	N+=1
	if N==Nlim:
		batchName='gwEvol_paml_'+str(iterBatch)
		submitQsubWithPBS(createPBS(cmdList,batchName,queue=args.queue,workdir=rootedDir.paml))
		N=0
		iterBatch+=1
		cmdList=list()
if N!=0:
	batchName='gwEvol_paml_'+str(iterBatch)
	submitQsubWithPBS(createPBS(cmdList,batchName,queue=args.queue,workdir=rootedDir.paml))

# save rootedDir and save logs then exit
saveRoot(rootedDir)
sys.exit()
